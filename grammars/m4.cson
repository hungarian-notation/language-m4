# If this is your first time writing a language grammar, check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/

'scopeName': 'source.m4.common'
'name': 'Common M4'
'fileTypes': [
  'm4'
  'e4'
  'ac'  # autoconf
]
'firstLineMatch': '''(?x)
    (?:     AC_INIT
    |       m4_[a-z0-9]
    |       include\\(\\`[^\\']*\\'\\)
    |       \\-\\*\\-[ ]Autoconf[ ]\\-\\*\\-
    )
'''
'foldingStartMarker':   '(?:[\\[\\{\\(]|(?:\\#|m4_dnl|dnl)\\s*region)'
'foldingStopMarker':    '(?:[\\]\\}\\)]|(?:\\#|m4_dnl|dnl)\\s*endregion)'
'patterns': [
    {'include': '#comment'}
    {'include': '#define_macro'}
    {'include': '#invoke_macro'}
    {'include': '#quoted_input'}
    {'include': '#no_arg_macros'}
    {'include': '#paren_list'}
    {'include': '#argument_tokens'}
]

'repository':

    'clear_comment':
        'name':     'comment.line.m4'
        'match':    '''(?x)
            (?: \\b(?:m4_)?dnl(?:$|\\b)|\\#
            |   ^\\s*\\#.*
            |   ^\\s*(?:m4_)?dnl.*
            )\\s*$
        '''

    'comment':
        'name':     'comment.line.m4'
        'match':    '(?:\\b(?:m4_)?dnl(?:$|\\b)|\\#).*$'

    'define_macro':
        # This pattern attempts to match common macros that themselves operate
        # on macros so that we can highlight the names of the macros they
        # operate on.
        #
        # The goal here is to catch and highlight places where new macro names
        # are introduced.

        'name': 'meta.function.macro.define.m4'
        'begin': '(\\b(?:(?:m4|e4|AC|AM)[_]?)?(?:def|undef|defn|define|undefine|SUBST|DEFINE|DEFUN|DEFUN)(?:[_][a-zA-Z0-9_]*)?\\b)(\\()\\s*(\\[)([^\\$\\,\\]\\)]+)(\\])\\s*[,]?'
        'beginCaptures':
            '1':
                'name': 'keyword.control.macro.define.m4'
            '2':
                'name': 'punctuation.definition.parameters.begin.m4'
            '3':
                'name': 'punctuation.definition.string.begin.bold.m4'
            '4':
                'name': 'entity.name.type.macro.m4'
            '5':
                'name': 'punctuation.definition.string.end.bold.m4'
        'end': '(\\))'
        'endCaptures':
            '1':
                'name': 'punctuation.definition.parameters.begin.m4'
        'patterns': [
            {'include': '#comment'}
            {'include': '#define_macro'}
            {'include': '#invoke_macro'}
            {'include': '#quoted_input'}
            {'include': '#no_arg_macros'}
            {'include': '#paren_list'}
            {'include': '#argument_tokens'}
        ]

    'invoke_macro':
        # This pattern matches macros invoked with arguments. It highlights
        # macros with set prefixes as "keywords" and tje rest as "variables"

        'name': 'meta.function.macro.m4'
        'begin': '(?:(\\b(?:[_]*(?:m4|e4|AC|AM)[_]?)[a-zA-Z0-9_]*\\b)|(\\b[a-zA-Z_][a-zA-Z0-9_]*\\b))(\\()'
        'beginCaptures':
            '1':
                'name': 'support.function.builtin.m4'
            '2':
                'name': 'variable.macro.m4'
            '3':
                'name': 'punctuation.definition.parameters.begin.m4'
        'end': '(\\))'
        'endCaptures':
            '1':
                'name': 'punctuation.definition.parameters.begin.m4'
        'patterns': [
            {'include': '#comment'}
            {'include': '#define_macro'}
            {'include': '#invoke_macro'}
            {'include': '#quoted_input'}
            {'include': '#no_arg_macros'}
            {'include': '#paren_list'}
            {'include': '#argument_tokens'}
        ]

        # This pattern catches the builtins that are used without arguments.
        #
        # We don't highlight non-built in non-argument macros because they are
        # indistinguishable from plaintext.

    'no_arg_macros':
        'name': 'support.function.builtin.m4'
        'match': '''(?x)
            (?: \\b(?:[A-Z]+_INIT|[A-Z]+_PROG_[A-Z]+|(?:[_]*(?:m4|e4|AC|AM))[a-zA-Z0-9_]+)\\b
            | \\b(?:m4_)?[_]{2,}[a-zA-Z0-9_]*[_]{2,}\\b
            )
        '''
    'quoted_input':
        'name': 'meta.quote.m4'
        'begin': '(\\[)'
        'beginCaptures':
            '1':
                'name': 'punctuation.definition.string.begin.bold.m4'
        'end': '(\\])'
        'endCaptures':
            '1':
                'name': 'punctuation.definition.string.end.bold.m4'
        'patterns': [
            {'include': '#clear_comment'}
            {'include': '#define_macro'}
            {'include': '#invoke_macro'}
            {'include': '#quoted_input'}
            {'include': '#no_arg_macros'}
            {'include': '#paren_list'}
            {'include': '#argument_tokens'}
        ]

    'paren_list':
        'name': 'meta.list.m4'
        'begin': '(\\()'
        'beginCaptures':
            '1':
                'name': 'punctuation.definition.begin.bold.m4'
        'end': '(\\))'
        'endCaptures':
            '1':
                'name': 'punctuation.definition.end.bold.m4'
        'patterns': [
            {'include': '#comment'}
            {'include': '#define_macro'}
            {'include': '#invoke_macro'}
            {'include': '#quoted_input'}
            {'include': '#no_arg_macros'}
            {'include': '#paren_list'}
            {'include': '#argument_tokens'}
        ]

    'argument_tokens':
        'name':     'support.constant'
        'match':    '\\$(?:([\\#\\*\\@])|([0-9]))'
        'captures':
            '1':
                'name': 'support.constant.meta-argument.m4'
            '2':
                'name': 'support.constant.argument.m4'
