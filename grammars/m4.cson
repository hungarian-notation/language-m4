# If this is your first time writing a language grammar, check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/

'scopeName': 'source.m4.common'
'name': 'Common M4'
'fileTypes': [
  'm4'
  'e4'
  'ac'  # autoconf
]
'firstLineMatch': '''(?x)
    (?:     AC_INIT
    |       m4_[a-z0-9]
    |       include\\(\\`[^\\']*\\'\\)
    |       \\-\\*\\-[ ]Autoconf[ ]\\-\\*\\-
    )
'''
'foldingStartMarker':   '(?:[\\[\\{\\(]|(?:\\#|m4_dnl|dnl)\\s*region)'
'foldingStopMarker':    '(?:[\\]\\}\\)]|(?:\\#|m4_dnl|dnl)\\s*endregion)'
'patterns': [
    {'include': '#comment'}
    {'include': '#first_comment_with_doc'}
    {'include': '#first_comment'}
    {'include': '#define_macro'}
    {'include': '#invoke_macro'}
    {'include': '#quoted_input'}
    {'include': '#no_arg_macros'}
    {'include': '#paren_list'}
    {'include': '#argument_tokens'}
]

'repository':

    # If the first line of a comment block contains a single identifier,
    # or if it contains an identifier followed by an args list that either
    # ends with nothing after it, or continues past the end of the line, we
    # highlight it as documentation.

    # To detect the first comment line, all comment rules will consume the
    # comment character at the beginning of the following line (if present).
    # All the comment rules except the first are predicated on a LOOKBEHIND
    # that sees a comment token consumed by the previous rule. If there is a
    # comment token for first_comment_* to match, it is the first comment line.

    # We distinguish between first_comment_with_doc and first_comment because
    # we want to allow multiple lines of documentation headers. To that end, the
    # first_comment_with_doc rule refrains from consuming the comment token
    # on the following line, making it as if that line were also the "first"
    # line.

    'mid_doc_comment_token':
        'name':     'comment.line.m4'
        'match':    '^(\\#|dnl)'

    'first_comment_with_doc':
        'name':     'comment.javadoc.line.m4'
        'begin':    '''(?x)
            # match the start of the comment
            ^ \\s* ( \\# | [d][n][l] )

            # then, after optional whitespace, the identifier.
            \\s* [a-zA-Z_][a-zA-Z\\-_0-9]*

            (?:
                # match the beginning of an args list that does not end on
                # this line.
                (?= [\\(] [^\\)]* $ )
            |
                # match an args list followed by only whitespace
                (?= [\\(] [^\\)]* [\\)] \\s* $ )
            |
                # match only whitespace after the identifier
                \\s* $
            )
        '''
        'beginCaptures':
            '1':
                'name':     'comment.line.m4'
        'end':      '^'
        'patterns': [
            {'include': '#documented_args'}
        ]

    'first_comment':
        'name':     'comment.line.m4'
        'begin':    '''(?x)
            ^ \\s* ( \\# | \\b dnl \\b )

            # This capture matches when the only non-whitespace characters in
            # the comment are hyphens.

            ( \\s* [\\-]+ \\s* $ )?
        '''
        'beginCaptures':
            '2':
                'name':     'comment.javadoc.line.m4'
        'end':      '^\\s*(\\#|\\bdnl\\b)?'

    'comment':
        'name':     'comment.line.m4'
        'begin':    '''(?x)
            (?:
                \\s* (?<= ^ \\# )
            |
                \\s* (?<= ^ dnl )
            |
                # match DNL tokens that do not occur at the
                # beginning of the line.

                ^ [\\s]+ \\b dnl \\b
            )

            ( \\s* [\\-]+ \\s* $ )?
        '''
        'beginCaptures':
            '1':
                'name':     'comment.javadoc.line.m4'
        # Consume until the beginning of the next line, capturing the comment
        # token for that line
        'end':      '^(\\#|\\bdnl\\b)?'

    'documented_args':
        'name':     'comment.javadoc.m4'
        'begin':    '''(?x)
            [\\(]
        '''
        'beginCaptures':
            '1':
                'name': 'punctuation.comment.m4'
        'end': '''(?x)
            [\\)] (.*) $
        '''
        'endCaptures':
            '1':
                'name': 'comment.m4'
        'patterns': [
            {'include': '#mid_doc_comment_token'}
            {
                'match': '[a-zA-Z_][\\-a-zA-Z0-9]*'
                'name': 'variable.parameter.function.m4'
            }
            {
                'match': '[\\[\\]\\=\\,]'
                'name': 'punctuation.definition.parameters.m4'
            }
        ]

    'clear_comment':
        'name':     'comment.line.m4'
        'match':    '''(?x)
            (?: \\b dnl (?: $ | \\b ) | \\#
            |   ^\\s*\\#.*
            |   ^\\s*dnl.*
            )\\s*$
        '''

    'define_macro':
        # This pattern attempts to match common macros that themselves operate
        # on macros so that we can highlight the names of the macros they
        # operate on.
        #
        # The goal here is to catch and highlight places where new macro names
        # are introduced.

        'name': 'meta.function.macro.define.m4'
        'begin': '(\\b(?:(?:m4|e4|AC|AM)[_]?)?(?:def|undef|defn|define|undefine|SUBST|DEFINE|DEFUN|DEFUN)(?:[_][a-zA-Z0-9_]*)?\\b)(\\()\\s*(\\[)([^\\$\\,\\[\\]\\)]+)(\\])\\s*(?=[\\,\\)])'
        'beginCaptures':
            '1':
                'name': 'keyword.control.macro.define.m4'
            '2':
                'name': 'punctuation.definition.parameters.begin.m4'
            '3':
                'name': 'punctuation.definition.string.begin.bold.m4'
            '4':
                'name': 'entity.name.type.macro.m4'
            '5':
                'name': 'punctuation.definition.string.end.bold.m4'
        'end': '(\\))'
        'endCaptures':
            '1':
                'name': 'punctuation.definition.parameters.begin.m4'
        'patterns': [
            {'include': '#first_comment_with_doc'}
            {'include': '#first_comment'}
            {'include': '#comment'}
            {'include': '#define_macro'}
            {'include': '#invoke_macro'}
            {'include': '#quoted_input'}
            {'include': '#no_arg_macros'}
            {'include': '#paren_list'}
            {'include': '#argument_tokens'}
        ]

    'invoke_macro':
        # This pattern matches macros invoked with arguments. It highlights
        # macros with set prefixes as "keywords" and tje rest as "variables"

        'name': 'meta.function.macro.m4'
        'begin': '(?:(\\b(?:[_]*(?:m4|e4|AC|AM)[_]?)[a-zA-Z0-9_]*\\b)|(\\b[a-zA-Z_][a-zA-Z0-9_]*\\b))(\\()'
        'beginCaptures':
            '1':
                'name': 'support.function.builtin.m4'
            '2':
                'name': 'variable.macro.m4'
            '3':
                'name': 'punctuation.definition.parameters.begin.m4'
        'end': '(\\))'
        'endCaptures':
            '1':
                'name': 'punctuation.definition.parameters.begin.m4'
        'patterns': [
            {'include': '#first_comment_with_doc'}
            {'include': '#first_comment'}
            {'include': '#comment'}
            {'include': '#define_macro'}
            {'include': '#invoke_macro'}
            {'include': '#quoted_input'}
            {'include': '#no_arg_macros'}
            {'include': '#paren_list'}
            {'include': '#argument_tokens'}
        ]

        # This pattern catches the builtins that are used without arguments.
        #
        # We don't highlight non-built in non-argument macros because they are
        # indistinguishable from plaintext.

    'no_arg_macros':
        'name': 'support.function.builtin.m4'
        'match': '''(?x)
            (?: \\b(?:[A-Z]+_INIT|[A-Z]+_PROG_[A-Z]+|(?:[_]*(?:m4|e4|AC|AM))[a-zA-Z0-9_]+)\\b
            | \\b(?:m4_)?[_]{2,}[a-zA-Z0-9_]*[_]{2,}\\b
            )
        '''

    'quoted_input':
        'name': 'meta.quote.m4'
        'begin': '(\\[)'
        'beginCaptures':
            '1':
                'name': 'punctuation.definition.string.begin.bold.m4'
        'end': '(\\])'
        'endCaptures':
            '1':
                'name': 'punctuation.definition.string.end.bold.m4'
        'patterns': [
            {'include': '#first_comment_with_doc'}
            {'include': '#first_comment'}
            {'include': '#comment'}
            {'include': '#define_macro'}
            {'include': '#invoke_macro'}
            {'include': '#quoted_input'}
            {'include': '#no_arg_macros'}
            {'include': '#paren_list'}
            {'include': '#argument_tokens'}
        ]

    'paren_list':
        'name': 'meta.list.m4'
        'begin': '(\\()'
        'beginCaptures':
            '1':
                'name': 'punctuation.definition.begin.bold.m4'
        'end': '(\\))'
        'endCaptures':
            '1':
                'name': 'punctuation.definition.end.bold.m4'
        'patterns': [
            {'include': '#first_comment_with_doc'}
            {'include': '#first_comment'}
            {'include': '#comment'}
            {'include': '#define_macro'}
            {'include': '#invoke_macro'}
            {'include': '#quoted_input'}
            {'include': '#no_arg_macros'}
            {'include': '#paren_list'}
            {'include': '#argument_tokens'}
        ]

    'argument_tokens':
        'name':     'support.constant'
        'match':    '\\$(?:([\\#\\*\\@])|([0-9]))'
        'captures':
            '1':
                'name': 'support.constant.meta-argument.m4'
            '2':
                'name': 'support.constant.argument.m4'
