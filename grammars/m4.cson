# If this is your first time writing a language grammar, check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/

'scopeName': 'source.m4.common'
'name': 'Common M4'
'fileTypes': [
  'm4'
  'e4'
  'ac'  # autoconf
]
'firstLineMatch': '(?:AC_INIT|m4_[a-z0-9])'
'foldingStartMarker':   '(?:[\\[\\{\\(]|\\#\\s*region)'
'foldingStopMarker':    '(?:[\\]\\}\\)]|\\#\\s*endregion)'
'patterns': [

    {
        'name': 'meta.quote.m4'
        'begin': '(\\[)'
        'beginCaptures':
            '1':
                'name': 'punctuation.definition.string.begin.bold.m4'
        'end': '(\\])'
        'endCaptures':
            '1':
                'name': 'punctuation.definition.string.end.bold.m4'
        'patterns': [
            {
                'include': '$self'
            }
        ]
    }

    {
        'name': 'meta.list.m4'
        'begin': '(\\()'
        'beginCaptures':
            '1':
                'name': 'punctuation.definition.begin.bold.m4'
        'end': '(\\))'
        'endCaptures':
            '1':
                'name': 'punctuation.definition.end.bold.m4'
        'patterns': [
            {
                'include': '$self'
            }
        ]
    }

    {
        'name':     'support.constant.meta-argument.m4'
        'match':    '\\$[\\#\\*\\@]'
    }

    {
        'name':     'support.constant.argument.m4'
        'match':    '\\$[0-9]'
    }

    {
        # This pattern attempts to match common macros that themselves operate
        # on macros so that we can highlight the names of the macros they
        # operate on.
        #
        # The goal here is to catch and highlight places where new macro names
        # are introduced.

        'name': 'meta.function.macro.define.m4'
        'begin': '(\\b(?:(?:m4|e4|AC|AM)[_]?)?(?:def|undef|defn|define|undefine|SUBST|DEFINE|DEFUN|DEFUN)(?:[_][a-zA-Z0-9_]*)?\\b)(\\()\\s*(\\[)([^\\$\\,\\]\\)]+)(\\])\\s*[,]?'
        'beginCaptures':
            '1':
                'name': 'keyword.control.macro.define.m4'
            '2':
                'name': 'punctuation.definition.parameters.begin.m4'
            '3':
                'name': 'punctuation.definition.string.begin.bold.m4'
            '4':
                'name': 'entity.name.type.macro.m4'
            '5':
                'name': 'punctuation.definition.string.end.bold.m4'
        'end': '(\\))'
        'endCaptures':
            '1':
                'name': 'punctuation.definition.parameters.begin.m4'
        'patterns': [
            {
                'include': '$self'
            }
        ]
    }

    {
        # This pattern matches macros invoked with arguments. It highlights
        # macros with set prefixes as "keywords" and tje rest as "variables"

        'name': 'meta.function.macro.m4'
        'begin': '(?:(\\b(?:[_]*(?:m4|e4|AC|AM)[_]?)[a-zA-Z0-9_]*\\b)|(\\b[a-zA-Z_][a-zA-Z0-9_]*\\b))(\\()'
        'beginCaptures':
            '1':
                'name': 'support.function.builtin.m4'
            '2':
                'name': 'variable.macro.m4'
            '3':
                'name': 'punctuation.definition.parameters.begin.m4'
        'end': '(\\))'
        'endCaptures':
            '1':
                'name': 'punctuation.definition.parameters.begin.m4'
        'patterns': [
            {
                'include': '$self'
            }
        ]
    }

    {
        # Mark text discarded by dnl as a comment.
        'name':     'comment.dnl.m4'
        'match':    '\\b(?:m4_)?dnl\\b.*$'
    }

    {
        # This pattern highlights macros that start and end with at least two
        # underscores, optionally with m4_ prefixed.

        'name':     'support.function.builtin.special.macro.m4'
        'match':    '\\b(?:m4_)?[_]{2,}[a-zA-Z0-9_]*[_]{2,}\\b'
    }

    {
        # This pattern catches the builtins that are used without arguments.
        #
        # We don't highlight non-built in non-argument macros because they are
        # indistinguishable from plaintext.

        'name': 'support.function.builtin.m4'
        'match': '\\b(?:[A-Z]+_INIT|[A-Z]+_PROG_[A-Z]+|(?:[_]*(?:m4|e4|AC|AM))[a-zA-Z0-9_]*)\\b'
    }

    #
    {
        'name':     'comment.javadoc.docucomment.line.m4'

        'begin':    """(?x)
            ^(\\#)(?:\\s([a-zA-Z0-9_]+\\((.*)\\)))$
        |   ^\\#\\s([^\\s]+)\\s*$
        """
        'beginCaptures':
            '2':
                'name': 'title.markdown.markup.text.comment'
            '3':
                'name': 'heading.markdown.markup.text.comment'
            '4':
                'name': 'heading.markdown.markup.text.comment'
        'end':      '^(?!\\#)|^\\s*\\#\\s*[\\-]+\\s*$'
        'patterns': [

            {
                'name': 'comment.documentation.javadoc.docucomment.autodoc'
                'match': """(?x)
                    ^(\\#)(?:\\s([a-zA-Z0-9_]+\\((.*)\\)))$
                |   ^\\#\\s([^\\s]+)\\s*$
                """
                'captures':
                    '2':
                        'name': 'title.markdown.markup.text.comment'
                    '3':
                        'name': 'heading.markdown.markup.text.comment'
                    '4':
                        'name': 'heading.markdown.markup.text.comment'
            }
            {
                'name': 'comment.documentation.javadoc.docucomment.autodoc'
                'match': '^\\#(.*[^\\-\\s].*)$'
            }
        ]
    }

    # 'comment.documentation.javadoc.docucomment.autodoc'
    {
        'name':     'comment.line.m4'

        'begin':    """
            ^\\s*(?=\\#)
        """
        'beginCaptures':
            '2':
                'name': 'markdown.title'
            '3':
                'name': 'markdown.heading'
        'end':      '^(?!\\#)'
        'patterns': [
            {
                'name':     'comment.line.m4'
                'match': '([\\#]+)([^#]+)(\\1)'
                'captures':
                    '2':
                        'name': 'markdown.title'
            }
        ]
    }

    {
        # Code folding support. I'll probably be the only one to ever use this,
        # but its harmless!

        'name':     'comment.region.foldable.folding.m4'
        'contentName': 'none';
        'begin':    '^\\s*\\#\\s*region(.*)$'
        'beginCaptures':
            '1':
                'name': 'markup.bold.m4'
        'end':      '^\\s*\\#\\s*endregion\\s*#'
        'patterns': [
            {
                'include': '$self'
            }
        ]
    }
]
